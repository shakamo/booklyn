{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "lib/tasks/scraping.rake",
			"settings":
			{
				"buffer_size": 1725,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/views/index.html",
			"settings":
			{
				"buffer_size": 21586,
				"line_ending": "Windows"
			}
		},
		{
			"file": "app/assets/js/ng.js",
			"settings":
			{
				"buffer_size": 6087,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Gemfile",
			"settings":
			{
				"buffer_size": 1497,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\nrequire 'net/https'\nrequire 'json'\n\n# Scraping\n#  Contentは、アニメやドラマのタイトル取得などを行う。\n#    Manater, Anikore, Posite, Rakuten\n#  Episodeは、アニメやドラマの話数取得などを行う。\n#  Postは、動画サイトやTorrentなどの投稿の取得を行う。\nmodule Scrape::Content\n\n  # コンテンツの一覧を取得するクラス\n  #   アニメやドラマのタイトル、放送日などを取得する。\n  #   アニメやドラマのタイトル、放送日などを取得する。\n  class ContentManager\n\n    Item = Struct.new(:word, :tfidf)\n\n    # Contentを取得して、データベースに格納する。\n    # @param site_name [String] Contentを取得するサイトを指定する。Anikore, Rakuten\n    # @param year [String] Contentを取得する範囲を指定する。Anikore のみ。2015\n    # @param season [String] Contentを取得するシーズンを指定する。winter, spring, summer, autumn\n    def self.createAll(site_name, year, season)\n      if site_name == 'Anikore' then\n        AnikoreContent.createAll(year, season)\n      elsif site_name == 'Rakuten' then\n        RakutenContent.create(season)\n      end\n    end\n\n    def self.get_content(title_query)\n      contents = Content.where(Content.arel_table[:trim_title].matches(title_query))\n\n      if contents && contents.size == 1\n        return contents.first\n      end\n\n      contents = Content.where((Content.arel_table[:trim_title].matches(title_query + '%').\n      or(Content.arel_table[:trim_title].matches('%' + title_query).\n      or(Content.arel_table[:trim_title].matches('%' + title_query + '%')))))\n\n      if contents && contents.size == 1\n        return contents.first\n      else\n        StandardMailer.error_mail('ContentManager', 'Content データが取得できませんでした。対象データはスキップされます。' + title_query).deliver\n        return nil\n      end\n    end\n\n    def self.insert_tfidf\n      contents = Content.all.to_a.each do |content|\n        puts content.title\n\n        url = URI.parse('http://labs.goo.ne.jp/api/morph')\n        req = Net::HTTP::Post.new(url.path)\n        req.set_form_data({\"app_id\" => \"9f44e0022e49a2414c19d0689a687c44b0e85d603219e4f7042b6d57a668d678\",\"sentence\" => content.title}, ';')\n\n        http = Net::HTTP.new(url.host, 443)\n        http.use_ssl = true\n        res = http.start do |http| \n          http.request(req) \n        end\n        json = JSON.parse(res.body)\n\n        json[\"word_list\"].each do |item|\n          item.each do |word|\n            puts word[0]\n\n            tf = TermFrequency.find_or_initialize_by(content_id: content.id, word: word[0])\n        tf.save\n          end\n        end\n      end\n    end\n\n    def self.get_tfidf(title)\n      url = URI.parse('http://labs.goo.ne.jp/api/morph')\n      req = Net::HTTP::Post.new(url.path)\n      req.set_form_data({\"app_id\" => \"9f44e0022e49a2414c19d0689a687c44b0e85d603219e4f7042b6d57a668d678\",\"sentence\" => title}, ';')\n\n      http = Net::HTTP.new(url.host, 443)\n      http.use_ssl = true\n      res = http.start do |http| \n        http.request(req) \n      end\n      json = JSON.parse(res.body)\n\n      items = Array.new\n      wordSet = Set.new\n\n      json[\"word_list\"].each do |words|\n        words.each do |word|\n          tfidf = ActiveRecord::Base.connection.select_rows(\"SELECT CASE WHEN WORD <> 0 THEN LOG(DOCUMENT/WORD::DECIMAL)+1 ELSE 0 END AS IDF FROM (SELECT COUNT(A.X) AS WORD FROM (SELECT COUNT(*) AS X FROM TERM_FREQUENCIES WHERE WORD = '\" + word[0] + \"' GROUP BY CONTENT_ID) AS A) AS AA ,(SELECT COUNT(B.X) AS DOCUMENT FROM (SELECT COUNT(CONTENT_ID) AS X FROM TERM_FREQUENCIES GROUP BY CONTENT_ID) AS B) AS BB\")[0][0].to_f\n\n          items << Item.new(word[0], tfidf)\n\n          if 2.3 < tfidf then\n            wordSet << word[0]\n          end\n        end\n      end\n      items = items.sort do |left, right| \n        right.tfidf <=> left.tfidf\n      end\n\n      contentSet = Set.new\n      items.each do |item|\n        contents = TermFrequency.where(word: item.word)\n\n        currentSet = Set.new\n        contents.each do |content|\n          currentSet << content.content_id\n        end\n\n        if contentSet.size == 0 then\n          currentSet.each do |item|\n            contentSet << item\n          end\n        else\n          contentSet = contentSet & currentSet\n        end\n\n        if contentSet.size == 1 then\n          word_count = TermFrequency.where(word: wordSet.to_a, content_id: contentSet.first).group(:word).count.size\n\n          if wordSet.size*0.8 < word_count && word_count <= wordSet.size then\n            return contentSet.first\n          end\n          return nil\n        end\n      end\n      return nil\n    end\n  end\nend\n",
			"file": "app/services/scrape/content/content_manager.rb",
			"file_size": 4726,
			"file_write_time": 130706905950000000,
			"settings":
			{
				"buffer_size": 4288,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/services/scrape/episode/episode_manager.rb",
			"settings":
			{
				"buffer_size": 979,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
	],
	"file_history":
	[
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/content/posite.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/content/rakuten.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/content/shoboi.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/content/anikore.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/post/veoh_post.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/post/saymove_post.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/post/himawari_post.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/post/b9dm_post.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/post/dailymotion_post.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/post/holder_post.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/post/post_manager.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/post/nosub_post.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/page/tvdramadouga_page.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/page/tvanimedouga_page.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/content/posite_content.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/content/anikore_content.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/content/shoboi_content.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/content/rakuten_content.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/episode_manager.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/post_manager.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/content_manager.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/scrape_tvanimedouga.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/services/scrape/episode_creator.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/test/services/test_scrape_for_posts.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/app/assets/js/app.js",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/Rakefile",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/Procfile",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/config/environment.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/config/application.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/config/database.yml",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/config.ru",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/Gemfile",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/config/environments/test.rb",
		"/Users/sakamotojunichi/Develop/projects/booklyn-project/config/environments/production.rb"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/Users/sakamotojunichi/Develop/projects/booklyn-project"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"        \n",
			"serve_static_assets",
			"new",
			"item"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "lib/tasks/scraping.rake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1725,
						"regions":
						{
						},
						"selection":
						[
							[
								488,
								488
							]
						],
						"settings":
						{
							"syntax": "Packages/Ruby/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "app/views/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21586,
						"regions":
						{
						},
						"selection":
						[
							[
								13043,
								13043
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5135.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "app/assets/js/ng.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6087,
						"regions":
						{
						},
						"selection":
						[
							[
								1756,
								1756
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 644.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Gemfile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1497,
						"regions":
						{
						},
						"selection":
						[
							[
								1191,
								1191
							]
						],
						"settings":
						{
							"syntax": "Packages/Ruby/Ruby.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 180.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 4,
					"file": "app/services/scrape/content/content_manager.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4288,
						"regions":
						{
						},
						"selection":
						[
							[
								811,
								811
							]
						],
						"settings":
						{
							"syntax": "Packages/Ruby/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 5,
					"file": "app/services/scrape/episode/episode_manager.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 979,
						"regions":
						{
						},
						"selection":
						[
							[
								93,
								93
							]
						],
						"settings":
						{
							"syntax": "Packages/Ruby/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			],
			[
				2,
				0,
				3,
				1
			]
		],
		"cols":
		[
			0.0,
			0.33,
			0.66,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "booklyn.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 237.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
